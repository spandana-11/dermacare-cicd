import{r as F,_ as I,$ as l,a as i,c as L,P as c,o as t,B as n,E as T,M as R,F as j,G as A,H as U,I as V,J as B}from"./index-Cv0vxzO7.js";import{b as v}from"./CFormInput-CmNvXk2d.js";var m=F.forwardRef(function(e,a){var s,o=e.children,y=e.className,S=e.feedback,$=e.feedbackInvalid,h=e.feedbackValid,k=e.floatingClassName,C=e.floatingLabel,w=e.htmlSize,d=e.id,p=e.invalid,E=e.label,b=e.options,f=e.size,N=e.text,x=e.tooltipFeedback,g=e.valid,u=I(e,["children","className","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","id","invalid","label","options","size","text","tooltipFeedback","valid"]);return l.createElement(v,{describedby:u["aria-describedby"],feedback:S,feedbackInvalid:$,feedbackValid:h,floatingClassName:k,floatingLabel:C,id:d,invalid:p,label:E,text:N,tooltipFeedback:x,valid:g},l.createElement("select",i({id:d,className:L("form-select",(s={},s["form-select-".concat(f)]=f,s["is-invalid"]=p,s["is-valid"]=g,s),y),size:w},u,{ref:a}),b?b.map(function(r,z){return l.createElement("option",i({},typeof r=="object"&&r.disabled&&{disabled:r.disabled},typeof r=="object"&&r.value!==void 0&&{value:r.value},{key:z}),typeof r=="string"?r:r.label)}):o))});m.propTypes=i({className:c.string,htmlSize:c.number,options:c.array},v.propTypes);m.displayName="CFormSelect";const M=async e=>{console.log("Serviceid response:",e);try{const a=await t.get(`${R}/${j}/${e}`);return console.log("Service response:",a.data),a.data}catch(a){if(a.response&&a.response.status===404)return console.log("Service response:",a.response.data),a.response.data;throw console.error("Unexpected error:",a.message||a),a}},G=async()=>{console.log("Serviceid response:");try{const e=await t.get(`${n}/${T}`);return console.log("Service response:",e.data),e.data}catch(e){if(e.response&&e.response.status===404)return console.log("Service response:",e.response.data),e.response.data;throw console.error("Unexpected error:",e.message||e),e}},H=async()=>{try{return(await t.get(`${n}/${A}`)).data}catch(e){throw console.error("Error fetching service data:",e.message),e.response&&(console.error("Error Response Data:",e.response.data),console.error("Error Response Status:",e.response.status)),e}},J=async(e,a)=>{console.log("Sending data to id:",a);try{return console.log("Sending data to API:",e),await t.post(`${n}/${V}/${a}`,e,{headers:{"Content-Type":"application/json"}})}catch(s){console.error("Error response:",s.response),alert(`Error: ${s.response.status} - ${s.response.data.message||s.response.statusText}`)}},W=async(e,a,s)=>{console.log(e,a),console.log(s);try{const o=await t.put(`${n}/${U}/${s.hospitalId}/${s.subServiceId}`,s,{headers:{"Content-Type":"application/json"}});return console.log("Service updated successfully:",o.data),o.data}catch(o){throw console.error("Error updating service:",o),o}},q=async(e,a)=>{try{console.log("Service name:",e);const s=await t.delete(`${n}/${B}/${a}/${e}`);return console.log("Service deleted successfully:",s.data),s.data}catch(s){throw s}};export{m as C,M as a,H as b,q as d,J as p,G as s,W as u};
