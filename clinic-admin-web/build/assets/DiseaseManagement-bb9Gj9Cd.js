import{o as k,B as M,I as ie,J as le,U as ne,K as de,r,j as e,Q as ce,y as p}from"./index-BQRndUr-.js";import{c as he,a as x}from"./index.esm-kPg_xJHJ.js";/* empty css                      */import{X as pe}from"./index.es-CnO2hUzf.js";import{C as T}from"./CForm-ErNLGUDF.js";import{C as ue}from"./CInputGroup-5zPXr3Y-.js";import{C as D}from"./CFormInput-CGpy1-2P.js";import{C as me}from"./CInputGroupText-Df5m6PW7.js";import{c as xe}from"./cil-search-CDkY_4k-.js";import{C as w,a as b,b as E}from"./CModalHeader-CnBCdOSi.js";import{C as S}from"./CModalTitle-CTMCnDzP.js";import{C as q,a as N}from"./CRow-CiETNr7h.js";import{C as H}from"./CModalFooter-Do3Y1geN.js";import"./CFormLabel-DMA6u-r3.js";import"./CConditionalPortal-D0WgdB7t.js";const je=async()=>{try{const a=await k.get(`${M}/${ie}`);return console.log("Disease data:",a.data),a.data}catch(a){throw console.error("Error fetching disease data:",a.message),a.response&&(console.error("Error Response Data:",a.response.data),console.error("Error Response Status:",a.response.status)),a}},fe=async a=>{var d;try{const o={disease:a.disease||"",hospitalId:a.hospitalId||""},i=await k.post(`${M}/${le}`,o,{headers:{"Content-Type":"application/json"}});return console.log("Add Disease Response:",i),i.data}catch(o){throw console.error("Error adding disease:",((d=o.response)==null?void 0:d.data)||o),o}},De=async(a,d,o)=>{var i;try{return(await k.put(`${M}/${ne}/${d}/${o}`,a,{headers:{"Content-Type":"application/json"}})).data}catch(u){throw console.error("Error updating disease:",((i=u.response)==null?void 0:i.data)||u),u}},ye=async(a,d)=>{var o;try{const i=await k.delete(`${M}/${de}/${a}/${d}`,{headers:{"Content-Type":"application/json"}});return console.log("Disease deleted successfully:",i.data),i.data}catch(i){throw console.error("Error deleting disease:",((o=i.response)==null?void 0:o.data)||i),i}},Le=()=>{const[a,d]=r.useState(""),[o,i]=r.useState([]),[u,L]=r.useState([]),[_,y]=r.useState(!1),[R,G]=r.useState(null),[X,C]=r.useState(!1),[g,V]=r.useState(null),[z,j]=r.useState(!1),[l,I]=r.useState(null),[h,$]=r.useState({}),[J,A]=r.useState(!1),[K,U]=r.useState(null),[O,B]=r.useState(null),[c,F]=r.useState({disease:"",hospitalId:""}),P=s=>s.map(t=>({...t,id:t.id||t._id,disease:t.disease||""})),v=async()=>{y(!0);try{const s=await je();i(P(s.data))}catch{G("Failed to fetch disease data.")}finally{y(!1)}},W=async()=>{try{await ye(K,O),p.success("Disease deleted successfully!",{position:"top-right"}),v()}catch(s){p.error("Failed to delete disease."),console.error("Delete error:",s)}A(!1)},Y=()=>{U(null),B(null),A(!1)};r.useEffect(()=>{v()},[]),r.useEffect(()=>{const s=a.toLowerCase().trim();if(!s){L([]);return}const t=o.filter(n=>{var m;return(m=n.disease)==null?void 0:m.toLowerCase().includes(s)});L(t)},[a,o]);const Z=()=>{const s={};return c.disease.trim()||(s.disease="Disease name is required."),c.hospitalId.trim()||(s.hospitalId="Hospital ID is required."),$(s),Object.keys(s).length===0},ee=async()=>{var s,t,n,m;if(Z())try{const f={disease:c.disease,hospitalId:c.hospitalId};await fe(f),p.success("Disease added successfully!"),F({disease:"",hospitalId:""}),d(""),v(),C(!1)}catch(f){const Q=((t=(s=f.response)==null?void 0:s.data)==null?void 0:t.message)||((n=f.response)==null?void 0:n.statusText)||"An unexpected error occurred.";((m=f.response)==null?void 0:m.status)===409||Q.toLowerCase().includes("duplicate")?p.error(`Error: Duplicate disease name - ${c.disease} already exists!`,{position:"top-right"}):p.error(`Error adding disease: ${Q}`,{position:"top-right"})}},se=s=>{I(s),j(!0)},ae=async()=>{if(!l||!l.id||!l.hospitalId){p.error("Missing disease data to update.");return}const{id:s,hospitalId:t}=l;y(!0);try{await De({disease:l.disease,hospitalId:l.hospitalId},s,t),p.success("Disease updated successfully!"),j(!1),v()}catch(n){console.error("Update error:",n),p.error("Failed to update disease.")}finally{y(!1)}},te=s=>{U(s.diseaseId||s.id||s._id),B(s.hospitalId),A(!0)},re=[{name:"S.No",selector:(s,t)=>t+1,width:"10%"},{name:"Disease Name",selector:s=>s.disease,sortable:!0,width:"45%"},{name:"Actions",cell:s=>e.jsxs("div",{style:{display:"flex",justifyContent:"space-between",width:"250px"},children:[e.jsx("div",{onClick:()=>V(s),style:{color:"green",cursor:"pointer"},children:"View"}),e.jsx("div",{onClick:()=>se(s),style:{color:"blue",cursor:"pointer"},children:"Edit"}),e.jsx("div",{onClick:()=>te(s),style:{color:"red",cursor:"pointer"},children:"Delete"})]})}],oe=({isVisible:s,message:t,onConfirm:n,onCancel:m})=>e.jsxs(w,{visible:s,onClose:m,backdrop:"static",children:[e.jsx(b,{children:e.jsx(S,{children:"Confirmation"})}),e.jsx(E,{children:t}),e.jsxs(H,{children:[e.jsx(x,{color:"secondary",onClick:()=>{j(!1),I(null)},children:"Cancel"}),e.jsx(x,{color:"danger",onClick:n,children:"Confirm"})]})]});return e.jsxs("div",{children:[e.jsx(ce,{}),e.jsxs(T,{className:"d-flex justify-content-between mb-3",children:[e.jsxs(ue,{className:"mb-3",style:{width:"300px",marginLeft:"40px"},children:[e.jsx(D,{type:"text",placeholder:"Search by Disease Name",value:a,onChange:s=>d(s.target.value)}),e.jsx(me,{children:e.jsx(he,{icon:xe})})]}),e.jsx(x,{color:"primary",style:{marginRight:"100px"},onClick:()=>C(!0),children:"Add Disease"})]}),g&&e.jsxs(w,{visible:!!g,onClose:()=>V(null),children:[e.jsx(b,{children:e.jsx(S,{children:"Disease Details"})}),e.jsxs(E,{children:[e.jsxs(q,{className:"mb-3",children:[e.jsx(N,{sm:4,children:e.jsx("strong",{children:"Disease Name:"})}),e.jsx(N,{sm:8,children:g.disease})]}),e.jsxs(q,{className:"mb-3",children:[e.jsx(N,{sm:4,children:e.jsx("strong",{children:"Hospital ID:"})}),e.jsx(N,{sm:8,children:g.hospitalId})]})]})]}),e.jsxs(w,{visible:X,onClose:()=>C(!1),backdrop:"static",children:[e.jsx(b,{children:e.jsx(S,{children:"Add New Disease"})}),e.jsx(E,{children:e.jsxs(T,{children:[e.jsxs("h6",{children:["Disease Name ",e.jsx("span",{style:{color:"red"},children:"*"})]}),e.jsx(D,{type:"text",name:"disease",value:c.disease,onChange:s=>{const t=s.target.value;F({...c,disease:t}),h.disease&&$(n=>({...n,disease:""}))},placeholder:"Enter disease name",className:h.disease?"is-invalid":""}),h.disease&&e.jsx("div",{className:"invalid-feedback",style:{color:"red"},children:h.disease}),e.jsxs("h6",{className:"mt-3",children:["Hospital ID ",e.jsx("span",{style:{color:"red"},children:"*"})]}),e.jsx(D,{type:"text",name:"hospitalId",value:c.hospitalId,onChange:s=>{const t=s.target.value;F({...c,hospitalId:t}),h.hospitalId&&$(n=>({...n,hospitalId:""}))},placeholder:"Enter Hospital Id",className:h.hospitalId?"is-invalid":""}),h.hospitalId&&e.jsx("div",{className:"invalid-feedback",style:{color:"red"},children:h.hospitalId})]})}),e.jsxs(H,{children:[e.jsx(x,{color:"primary",onClick:ee,children:"Add"}),e.jsx(x,{color:"secondary",onClick:()=>C(!1),children:"Cancel"})]})]}),e.jsxs(w,{visible:z,onClose:()=>j(!1),backdrop:"static",children:[e.jsx(b,{children:e.jsx(S,{children:"Edit Disease"})}),e.jsx(E,{children:e.jsxs(T,{children:[e.jsx("h6",{children:"Disease Name"}),e.jsx(D,{type:"text",value:(l==null?void 0:l.disease)||"",onChange:s=>I({...l,disease:s.target.value})}),e.jsx("h6",{className:"mt-3",children:"Hospital ID"}),e.jsx(D,{type:"text",value:(l==null?void 0:l.hospitalId)||"",onChange:s=>I({...l,hospitalId:s.target.value})})]})}),e.jsxs(H,{children:[e.jsx(x,{color:"primary",onClick:ae,children:"Update"}),e.jsx(x,{color:"secondary",onClick:()=>j(!1),children:"Cancel"})]})]}),e.jsx(oe,{isVisible:J,message:"Are you sure you want to delete this disease?",onConfirm:W,onCancel:Y}),_?e.jsx("div",{style:{textAlign:"center"},children:"Loading..."}):R?e.jsx("div",{children:R}):e.jsx(pe,{columns:re,data:u.length?u:o,pagination:!0})]})};export{Le as default};
